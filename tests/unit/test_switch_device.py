# Generated By: Cursor (Claude Sonnet 4.5)
"""
Unit tests for Switch device-specific behavior

Switch devices are special in ASCOM Alpaca - they represent a collection
of individual switches, each with an 'id' parameter. This requires unique
handling in the exporter.
"""

import sys
import unittest
from pathlib import Path

# Add src directory to path
sys.path.insert(0, str(Path(__file__).parent.parent.parent / "src"))

from importlib import import_module

import exporter_core


class TestSwitchMultipleSwitches(unittest.TestCase):
    """Test switch device with multiple switches (maxswitch > 1)"""

    def test_switch_creates_metrics_per_id(self):
        """Switch with maxswitch=4 should create metrics for each ID (0-3)"""
        alpaca_exporter = import_module("alpaca-exporter")

        # Setup configurations
        alpaca_exporter.configurations = {
            "switch": {
                "metric_prefix": "alpaca_switch_",
                "metrics": [
                    {"alpaca_name": "getswitch", "metric_name": "state"},
                ],
            }
        }
        alpaca_exporter.skip_device_attribute = {}

        # Mock functions
        def mock_get_value(_url, _device_type, _device_number, attribute, querystr, _record_metrics=True):
            if attribute == "name":
                return "TestSwitch"
            if attribute == "getswitch":
                # Return different values per ID
                if "id=0" in querystr:
                    return 1
                if "id=1" in querystr:
                    return 0
                if "id=2" in querystr:
                    return 1
                if "id=3" in querystr:
                    return 0
            return None

        def mock_get_value_cached(_url, _device_type, _device_number, attribute, _querystr=""):
            if attribute == "maxswitch":
                return 4
            return None

        # Process device
        device_status = {}
        devices = {"switch": [0]}

        metrics = exporter_core.process_device(
            "switch",
            0,
            alpaca_exporter.configurations,
            "http://localhost:11111/api/v1",
            False,
            devices,
            device_status,
            alpaca_exporter.skip_device_attribute,
            mock_get_value,
            mock_get_value_cached,
        )

        # Verify metrics created for each switch ID
        switch_state_metrics = [m for m in metrics if m[0] == "alpaca_switch_state"]
        self.assertEqual(len(switch_state_metrics), 4, "Should have 4 switch state metrics (one per ID)")

        # Verify each has unique id label
        ids = {m[1]["id"] for m in switch_state_metrics}
        self.assertEqual(ids, {0, 1, 2, 3}, "Should have metrics for id=0,1,2,3")


class TestSwitchSingleSwitch(unittest.TestCase):
    """Test switch device with only one switch (maxswitch=1)"""

    def test_switch_single_id(self):
        """Switch with maxswitch=1 should create metrics for id=0"""
        alpaca_exporter = import_module("alpaca-exporter")

        alpaca_exporter.configurations = {
            "switch": {
                "metric_prefix": "alpaca_switch_",
                "metrics": [
                    {"alpaca_name": "getswitch"},
                ],
            }
        }
        alpaca_exporter.skip_device_attribute = {}

        def mock_get_value(_url, _device_type, _device_number, attribute, _querystr, _record_metrics=True):
            if attribute == "name":
                return "SingleSwitch"
            if attribute == "getswitch":
                return 1
            return None

        def mock_get_value_cached(_url, _device_type, _device_number, attribute, _querystr=""):
            if attribute == "maxswitch":
                return 1
            return None

        device_status = {}
        devices = {"switch": [0]}

        metrics = exporter_core.process_device(
            "switch",
            0,
            alpaca_exporter.configurations,
            "http://localhost:11111/api/v1",
            False,
            devices,
            device_status,
            alpaca_exporter.skip_device_attribute,
            mock_get_value,
            mock_get_value_cached,
        )

        # Should have metrics for id=0
        switch_metrics = [m for m in metrics if "id" in m[1]]
        self.assertGreater(len(switch_metrics), 0, "Should have metrics with id label")
        self.assertTrue(all(m[1]["id"] == 0 for m in switch_metrics), "All metrics should have id=0")


class TestSwitchLabelIndependence(unittest.TestCase):
    """Test that each switch ID has independent labels"""

    def test_switch_labels_independent(self):
        """Each switch ID should get independent label sets"""
        alpaca_exporter = import_module("alpaca-exporter")

        alpaca_exporter.configurations = {
            "switch": {
                "metric_prefix": "alpaca_switch_",
                "metrics": [
                    {"alpaca_name": "getswitch", "metric_name": "state"},
                ],
            },
        }
        alpaca_exporter.skip_device_attribute = {}

        switch_names = {}

        def mock_get_value(_url, _device_type, _device_number, attribute, querystr, _record_metrics=True):
            if attribute == "name":
                return "TestSwitch"
            if attribute == "getswitch":
                # Track which IDs we see
                if "id=0" in querystr:
                    switch_names[0] = "Lights"
                    return 1
                if "id=1" in querystr:
                    switch_names[1] = "Fan"
                    return 1
                return 1
            return None

        def mock_get_value_cached(_url, _device_type, _device_number, attribute, _querystr=""):
            if attribute == "maxswitch":
                return 2
            return None

        device_status = {}
        devices = {"switch": [0]}

        metrics = exporter_core.process_device(
            "switch",
            0,
            alpaca_exporter.configurations,
            "http://localhost:11111/api/v1",
            False,
            devices,
            device_status,
            alpaca_exporter.skip_device_attribute,
            mock_get_value,
            mock_get_value_cached,
        )

        # Find switch state metrics for each ID
        switch_state_metrics = [m for m in metrics if m[0] == "alpaca_switch_state"]
        id0_metrics = [m for m in switch_state_metrics if m[1].get("id") == 0]
        id1_metrics = [m for m in switch_state_metrics if m[1].get("id") == 1]

        self.assertGreater(len(id0_metrics), 0, "Should have metrics for id=0")
        self.assertGreater(len(id1_metrics), 0, "Should have metrics for id=1")

        # Verify both IDs were processed by checking our tracking dict
        self.assertIn(0, switch_names, "ID 0 should have been queried")
        self.assertIn(1, switch_names, "ID 1 should have been queried")
        self.assertEqual(switch_names[0], "Lights")
        self.assertEqual(switch_names[1], "Fan")


class TestSwitchZeroSwitches(unittest.TestCase):
    """Test edge case: switch device with maxswitch=0"""

    def test_switch_zero_switches(self):
        """Switch with maxswitch=0 should not create switch-specific metrics"""
        alpaca_exporter = import_module("alpaca-exporter")

        alpaca_exporter.configurations = {
            "switch": {
                "metric_prefix": "alpaca_switch_",
                "metrics": [
                    {"alpaca_name": "getswitch"},
                ],
            }
        }
        alpaca_exporter.skip_device_attribute = {}

        def mock_get_value(_url, _device_type, _device_number, attribute, _querystr, _record_metrics=True):
            if attribute == "name":
                return "EmptySwitch"
            return None

        def mock_get_value_cached(_url, _device_type, _device_number, attribute, _querystr=""):
            if attribute == "maxswitch":
                return 0
            return None

        device_status = {}
        devices = {"switch": [0]}

        # Should not crash
        metrics = exporter_core.process_device(
            "switch",
            0,
            alpaca_exporter.configurations,
            "http://localhost:11111/api/v1",
            False,
            devices,
            device_status,
            alpaca_exporter.skip_device_attribute,
            mock_get_value,
            mock_get_value_cached,
        )

        # Should have device connected/name metrics but no switch-specific metrics
        switch_metrics = [m for m in metrics if "id" in m[1]]
        self.assertEqual(len(switch_metrics), 0, "Should have no metrics with id label")

        # But should still be tracked as connected
        connected_metrics = [m for m in metrics if m[0] == "alpaca_device_connected"]
        self.assertEqual(len(connected_metrics), 1, "Should still track device as connected")


class TestNonSwitchDevicesNoID(unittest.TestCase):
    """Test that non-switch devices don't get id label"""

    def test_telescope_no_id_label(self):
        """Telescope device should not have id label"""
        alpaca_exporter = import_module("alpaca-exporter")

        alpaca_exporter.configurations = {
            "telescope": {
                "metric_prefix": "alpaca_telescope_",
                "metrics": [
                    {"alpaca_name": "altitude"},
                ],
            }
        }
        alpaca_exporter.skip_device_attribute = {}

        def mock_get_value(_url, _device_type, _device_number, attribute, _querystr, _record_metrics=True):
            if attribute == "name":
                return "TestTelescope"
            if attribute == "altitude":
                return 45.5
            return None

        def mock_get_value_cached(_url, _device_type, _device_number, _attribute, _querystr=""):
            return None

        device_status = {}
        devices = {"telescope": [0]}

        metrics = exporter_core.process_device(
            "telescope",
            0,
            alpaca_exporter.configurations,
            "http://localhost:11111/api/v1",
            False,
            devices,
            device_status,
            alpaca_exporter.skip_device_attribute,
            mock_get_value,
            mock_get_value_cached,
        )

        # Verify no metrics have id label
        for metric_name, labels in metrics:
            self.assertNotIn("id", labels, f"Telescope metric {metric_name} should not have id label")


if __name__ == "__main__":
    unittest.main()
