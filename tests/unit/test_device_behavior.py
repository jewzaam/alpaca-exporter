# Generated By: Cursor (Claude Sonnet 4.5)
"""
Unit tests for device behavior (state transitions, error handling, skip lists)

These tests verify device lifecycle behavior that is common to both auto-discovery
and manual configuration modes.
"""

import json
import sys
import unittest
from pathlib import Path
from unittest.mock import Mock, patch

# Add src directory to path
sys.path.insert(0, str(Path(__file__).parent.parent.parent / "src"))


class TestSkipListBehavior(unittest.TestCase):
    """Test skip list behavior for error 1024 (not implemented)"""

    def setUp(self):
        """Clear prometheus registry and state before each test"""
        import prometheus_client

        # Clear the default registry
        prometheus_client.REGISTRY._collector_to_names.clear()
        prometheus_client.REGISTRY._names_to_collectors.clear()

    @patch("requests.get")
    def test_error_1024_adds_to_skip_list(self, mock_get):
        """
        Test that ErrorNumber 1024 adds attribute to skip list.

        When an ASCOM driver doesn't support an attribute, it returns error 1024.
        This should add the attribute to a skip list so we don't query it again.
        """
        from importlib import import_module

        import utility

        # Clear state
        utility.gauges = {}
        utility.counters = {}

        alpaca_exporter = import_module("alpaca-exporter")

        # Clear skip list
        alpaca_exporter.skip_device_attribute = {}

        # Mock response with error 1024 (not implemented)
        mock_response = Mock()
        mock_response.status_code = 200
        mock_response.text = json.dumps({"Value": None, "ErrorNumber": 1024, "ErrorMessage": "Not implemented"})
        mock_get.return_value = mock_response

        # Query an attribute that's not implemented
        value = alpaca_exporter.getValue(
            alpaca_base_url="http://localhost:11111/api/v1",
            device_type="telescope",
            device_number=0,
            attribute="declinationrate",
            querystr="",
            record_metrics=True,
        )

        # Should return None for error 1024
        self.assertIsNone(value, "Error 1024 should return None")

        # Verify attribute was added to skip list
        # Structure is: {device_type: {device_number: [attribute_list]}}
        self.assertIn("telescope", alpaca_exporter.skip_device_attribute, "Device type should be in skip list")
        self.assertIn("0", alpaca_exporter.skip_device_attribute["telescope"], "Device number should be in skip list")
        self.assertIn(
            "declinationrate",
            alpaca_exporter.skip_device_attribute["telescope"]["0"],
            "Attribute should be in skip list for this device",
        )

    @patch("requests.get")
    def test_non_1024_error_not_added_to_skip_list(self, mock_get):
        """
        Test that non-1024 errors do NOT add attribute to skip list.

        Temporary errors (network issues, sensor read failures, etc.) should NOT
        be skipped - we want to retry them on the next cycle.
        """
        from importlib import import_module

        import utility

        # Clear state
        utility.gauges = {}
        utility.counters = {}

        alpaca_exporter = import_module("alpaca-exporter")

        # Clear skip list
        alpaca_exporter.skip_device_attribute = {}

        # Mock response with a temporary error (not 1024)
        mock_response = Mock()
        mock_response.status_code = 200
        mock_response.text = json.dumps({"Value": None, "ErrorNumber": 1234, "ErrorMessage": "Temporary sensor error"})
        mock_get.return_value = mock_response

        # Query an attribute with a temporary error
        value = alpaca_exporter.getValue(
            alpaca_base_url="http://localhost:11111/api/v1",
            device_type="camera",
            device_number=0,
            attribute="ccdtemperature",
            querystr="",
            record_metrics=True,
        )

        # Should return None for any error
        self.assertIsNone(value, "Error should return None")

        # Verify attribute was NOT added to skip list (should retry next cycle)
        # Skip list should be completely empty for this device
        if "camera" in alpaca_exporter.skip_device_attribute and "0" in alpaca_exporter.skip_device_attribute["camera"]:
            self.assertNotIn(
                "ccdtemperature",
                alpaca_exporter.skip_device_attribute["camera"]["0"],
                "Non-1024 errors should NOT be added to skip list",
            )


class TestBooleanConversion(unittest.TestCase):
    """Test boolean to integer conversion for Prometheus metrics"""

    def setUp(self):
        """Clear prometheus registry before each test"""
        import prometheus_client

        prometheus_client.REGISTRY._collector_to_names.clear()
        prometheus_client.REGISTRY._names_to_collectors.clear()

    @patch("requests.get")
    def test_true_converts_to_1(self, mock_get):
        """
        Test that boolean True converts to integer 1.

        Prometheus requires numeric values. ASCOM boolean True should become 1.
        """
        from importlib import import_module

        import utility

        utility.gauges = {}
        utility.counters = {}

        alpaca_exporter = import_module("alpaca-exporter")

        # Mock response with True value
        mock_response = Mock()
        mock_response.status_code = 200
        mock_response.text = json.dumps({"Value": True, "ErrorNumber": 0, "ErrorMessage": ""})
        mock_get.return_value = mock_response

        value = alpaca_exporter.getValue(
            alpaca_base_url="http://localhost:11111/api/v1",
            device_type="camera",
            device_number=0,
            attribute="connected",
            querystr="",
            record_metrics=True,
        )

        self.assertEqual(value, 1, "Boolean True should convert to integer 1")
        self.assertIsInstance(value, int, "Converted value should be an integer type")

    @patch("requests.get")
    def test_false_converts_to_0(self, mock_get):
        """
        Test that boolean False converts to integer 0.

        Prometheus requires numeric values. ASCOM boolean False should become 0.
        """
        from importlib import import_module

        import utility

        utility.gauges = {}
        utility.counters = {}

        alpaca_exporter = import_module("alpaca-exporter")

        # Mock response with False value
        mock_response = Mock()
        mock_response.status_code = 200
        mock_response.text = json.dumps({"Value": False, "ErrorNumber": 0, "ErrorMessage": ""})
        mock_get.return_value = mock_response

        value = alpaca_exporter.getValue(
            alpaca_base_url="http://localhost:11111/api/v1",
            device_type="camera",
            device_number=0,
            attribute="cooleron",
            querystr="",
            record_metrics=True,
        )

        self.assertEqual(value, 0, "Boolean False should convert to integer 0")
        self.assertIsInstance(value, int, "Converted value should be an integer type")


class TestNumericValues(unittest.TestCase):
    """Test handling of numeric values (integers and floats)"""

    def setUp(self):
        """Clear prometheus registry before each test"""
        import prometheus_client

        prometheus_client.REGISTRY._collector_to_names.clear()
        prometheus_client.REGISTRY._names_to_collectors.clear()

    @patch("requests.get")
    def test_integer_value_unchanged(self, mock_get):
        """
        Test that integer values pass through unchanged.

        Integer device numbers, counts, etc. should be returned as-is.
        """
        from importlib import import_module

        import utility

        utility.gauges = {}
        utility.counters = {}

        alpaca_exporter = import_module("alpaca-exporter")

        # Mock response with integer value
        mock_response = Mock()
        mock_response.status_code = 200
        mock_response.text = json.dumps({"Value": 42, "ErrorNumber": 0, "ErrorMessage": ""})
        mock_get.return_value = mock_response

        value = alpaca_exporter.getValue(
            alpaca_base_url="http://localhost:11111/api/v1",
            device_type="filterwheel",
            device_number=0,
            attribute="position",
            querystr="",
            record_metrics=True,
        )

        self.assertEqual(value, 42, "Integer value should be unchanged")

    @patch("requests.get")
    def test_float_value_unchanged(self, mock_get):
        """
        Test that float values pass through unchanged.

        Temperature readings, coordinates, etc. are floats and should be preserved.
        """
        from importlib import import_module

        import utility

        utility.gauges = {}
        utility.counters = {}

        alpaca_exporter = import_module("alpaca-exporter")

        # Mock response with float value
        mock_response = Mock()
        mock_response.status_code = 200
        mock_response.text = json.dumps({"Value": 15.3, "ErrorNumber": 0, "ErrorMessage": ""})
        mock_get.return_value = mock_response

        value = alpaca_exporter.getValue(
            alpaca_base_url="http://localhost:11111/api/v1",
            device_type="camera",
            device_number=0,
            attribute="ccdtemperature",
            querystr="",
            record_metrics=True,
        )

        self.assertEqual(value, 15.3, "Float value should be unchanged")


if __name__ == "__main__":
    unittest.main()
