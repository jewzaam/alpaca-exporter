# Generated By: Cursor (Claude Sonnet 4.5)
"""
Unit tests for device behavior (state transitions, error handling, skip lists)

These tests verify device lifecycle behavior that is common to both auto-discovery
and manual configuration modes.
"""

import json
import sys
import unittest
from pathlib import Path
from unittest.mock import Mock, patch

# Add src directory to path
sys.path.insert(0, str(Path(__file__).parent.parent.parent / "src"))


class TestSkipListBehavior(unittest.TestCase):
    """Test skip list behavior for error 1024 (not implemented)"""

    @patch("requests.get")
    def test_true_converts_to_1(self, mock_get):
        """
        Test that boolean True converts to integer 1.

        Prometheus requires numeric values. ASCOM boolean True should become 1.
        """
        from importlib import import_module

        alpaca_exporter = import_module("alpaca-exporter")

        # Mock response with True value
        mock_response = Mock()
        mock_response.status_code = 200
        mock_response.text = json.dumps({"Value": True, "ErrorNumber": 0, "ErrorMessage": ""})
        mock_get.return_value = mock_response

        value = alpaca_exporter.getValue(
            alpaca_base_url="http://localhost:11111/api/v1",
            device_type="camera",
            device_number=0,
            attribute="connected",
            querystr="",
            record_metrics=True,
        )

        self.assertEqual(value, 1, "Boolean True should convert to integer 1")
        self.assertIsInstance(value, int, "Converted value should be an integer type")

    @patch("requests.get")
    def test_false_converts_to_0(self, mock_get):
        """
        Test that boolean False converts to integer 0.

        Prometheus requires numeric values. ASCOM boolean False should become 0.
        """
        from importlib import import_module

        alpaca_exporter = import_module("alpaca-exporter")

        # Mock response with False value
        mock_response = Mock()
        mock_response.status_code = 200
        mock_response.text = json.dumps({"Value": False, "ErrorNumber": 0, "ErrorMessage": ""})
        mock_get.return_value = mock_response

        value = alpaca_exporter.getValue(
            alpaca_base_url="http://localhost:11111/api/v1",
            device_type="camera",
            device_number=0,
            attribute="cooleron",
            querystr="",
            record_metrics=True,
        )

        self.assertEqual(value, 0, "Boolean False should convert to integer 0")
        self.assertIsInstance(value, int, "Converted value should be an integer type")


class TestNumericValues(unittest.TestCase):
    """Test handling of numeric values (integers and floats)"""

    @patch("requests.get")
    def test_integer_value_unchanged(self, mock_get):
        """
        Test that integer values pass through unchanged.

        Integer device numbers, counts, etc. should be returned as-is.
        """
        from importlib import import_module

        alpaca_exporter = import_module("alpaca-exporter")

        # Mock response with integer value
        mock_response = Mock()
        mock_response.status_code = 200
        mock_response.text = json.dumps({"Value": 42, "ErrorNumber": 0, "ErrorMessage": ""})
        mock_get.return_value = mock_response

        value = alpaca_exporter.getValue(
            alpaca_base_url="http://localhost:11111/api/v1",
            device_type="filterwheel",
            device_number=0,
            attribute="position",
            querystr="",
            record_metrics=True,
        )

        self.assertEqual(value, 42, "Integer value should be unchanged")

    @patch("requests.get")
    def test_float_value_unchanged(self, mock_get):
        """
        Test that float values pass through unchanged.

        Temperature readings, coordinates, etc. are floats and should be preserved.
        """
        from importlib import import_module

        alpaca_exporter = import_module("alpaca-exporter")

        # Mock response with float value
        mock_response = Mock()
        mock_response.status_code = 200
        mock_response.text = json.dumps({"Value": 15.3, "ErrorNumber": 0, "ErrorMessage": ""})
        mock_get.return_value = mock_response

        value = alpaca_exporter.getValue(
            alpaca_base_url="http://localhost:11111/api/v1",
            device_type="camera",
            device_number=0,
            attribute="ccdtemperature",
            querystr="",
            record_metrics=True,
        )

        self.assertEqual(value, 15.3, "Float value should be unchanged")


if __name__ == "__main__":
    unittest.main()
