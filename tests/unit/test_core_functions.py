# Generated By: Cursor (Claude Sonnet 4.5)
"""
Unit tests for core functions in alpaca-exporter

These tests verify the core functionality of the exporter using mocked HTTP requests.
"""

import json
import sys
import unittest
from pathlib import Path
from unittest.mock import Mock, patch

# Add src directory to path
sys.path.insert(0, str(Path(__file__).parent.parent / "src"))


class TestGetValue(unittest.TestCase):
    """Test the getValue function"""

    @patch("requests.get")
    def test_get_value_success(self, mock_get):
        """Test successful value retrieval from Alpaca API"""
        # Import here to ensure path is set

        # Mock a successful Alpaca API response
        mock_response = Mock()
        mock_response.status_code = 200
        mock_response.text = json.dumps({"Value": "TestTelescope", "ErrorNumber": 0, "ErrorMessage": ""})
        mock_get.return_value = mock_response

        # Import and test
        from importlib import import_module

        alpaca_exporter = import_module("alpaca-exporter")

        # Call getValue with all parameters:
        # - alpaca_base_url: base URL for API
        # - device_type: type of device (telescope, camera, etc.)
        # - device_number: numeric ID of device
        # - attribute: attribute name to query
        # - querystr: additional query parameters
        # - record_metrics: whether to record success/error metrics
        value = alpaca_exporter.getValue(
            alpaca_base_url="http://localhost:11111/api/v1",
            device_type="telescope",
            device_number=0,
            attribute="name",
            querystr="",
            record_metrics=True,
        )

        # Verify the returned value matches the mocked response
        self.assertEqual(value, "TestTelescope")

    @patch("requests.get")
    def test_get_value_error_1024(self, mock_get):
        """
        Test error 1024 (not implemented) handling.

        ErrorNumber 1024 indicates an ASCOM driver doesn't support a specific attribute.
        This should return None and NOT increment error counters (it's not a real error).
        """

        # Mock an Alpaca API response with error 1024 (not implemented)
        mock_response = Mock()
        mock_response.status_code = 200
        mock_response.text = json.dumps({"Value": None, "ErrorNumber": 1024, "ErrorMessage": "Not implemented"})
        mock_get.return_value = mock_response

        # Import and test
        from importlib import import_module

        alpaca_exporter = import_module("alpaca-exporter")

        # Query an attribute that's not implemented (e.g., tracking rates on a basic telescope)
        value = alpaca_exporter.getValue(
            alpaca_base_url="http://localhost:11111/api/v1",
            device_type="telescope",
            device_number=0,
            attribute="declinationrate",  # Not all telescopes support tracking rates
            querystr="",
            record_metrics=True,
        )

        # Error 1024 should return None (not an error, just not available)
        self.assertIsNone(value)

    @patch("requests.get")
    def test_get_value_boolean_conversion(self, mock_get):
        """
        Test boolean to integer conversion.

        Prometheus metrics require numeric values. ASCOM returns boolean values
        for some attributes (connected, cooleron, etc.), which must be converted
        to integers (True -> 1, False -> 0).
        """

        # Mock an Alpaca API response with a boolean value
        mock_response = Mock()
        mock_response.status_code = 200
        mock_response.text = json.dumps({"Value": True, "ErrorNumber": 0, "ErrorMessage": ""})
        mock_get.return_value = mock_response

        # Import and test
        from importlib import import_module

        alpaca_exporter = import_module("alpaca-exporter")

        # Query a boolean attribute (camera connected status)
        value = alpaca_exporter.getValue(
            alpaca_base_url="http://localhost:11111/api/v1",
            device_type="camera",
            device_number=0,
            attribute="connected",  # Boolean attribute
            querystr="",
            record_metrics=True,
        )

        # Boolean True should be converted to integer 1 for Prometheus
        self.assertEqual(value, 1)


class TestDiscoverDevices(unittest.TestCase):
    """Test the discoverDevices function"""

    @patch("requests.get")
    def test_discover_devices_success(self, mock_get):
        """
        Test successful device discovery via Alpaca Management API.

        The Management API returns a list of configured devices. This test verifies
        that the discovery function correctly parses the response and organizes
        devices by type.
        """

        # Mock Alpaca Management API response with multiple device types
        mock_response = Mock()
        mock_response.status_code = 200
        devices_data = {
            "Value": [
                {"DeviceType": "Telescope", "DeviceNumber": 0, "DeviceName": "SimTelescope", "UniqueID": "sim-tel-001"},
                {"DeviceType": "Camera", "DeviceNumber": 0, "DeviceName": "SimCamera", "UniqueID": "sim-cam-001"},
                {"DeviceType": "Rotator", "DeviceNumber": 0, "DeviceName": "SimRotator", "UniqueID": "sim-rot-001"},
            ],
            "ErrorNumber": 0,
            "ErrorMessage": "",
        }
        mock_response.text = json.dumps(devices_data)
        mock_get.return_value = mock_response

        # Import and test
        from importlib import import_module

        alpaca_exporter = import_module("alpaca-exporter")

        # Call discovery function (verbose=False to avoid log output in tests)
        discovered = alpaca_exporter.discoverDevices(
            alpaca_base_url="http://localhost:11111/api/v1",
            verbose=False,
        )

        # Verify that all device types were discovered and organized correctly
        # Structure should be: {device_type: [device_number, ...]}
        self.assertIn("telescope", discovered, "Telescope device type should be discovered")
        self.assertIn("camera", discovered, "Camera device type should be discovered")
        self.assertIn("rotator", discovered, "Rotator device type should be discovered")

        # Verify that device number 0 is present for each device type
        self.assertIn(0, discovered["telescope"], "Telescope device #0 should be in the list")
        self.assertIn(0, discovered["camera"], "Camera device #0 should be in the list")
        self.assertIn(0, discovered["rotator"], "Rotator device #0 should be in the list")

    @patch("requests.get")
    def test_discover_devices_empty(self, mock_get):
        """
        Test discovery when no devices are configured.

        This can happen at startup before devices are configured, or in test
        environments. The exporter should handle this gracefully.
        """

        # Mock Alpaca Management API response with empty device list
        mock_response = Mock()
        mock_response.status_code = 200
        devices_data = {"Value": [], "ErrorNumber": 0, "ErrorMessage": ""}
        mock_response.text = json.dumps(devices_data)
        mock_get.return_value = mock_response

        # Import and test
        from importlib import import_module

        alpaca_exporter = import_module("alpaca-exporter")

        # Call discovery function with no devices configured
        discovered = alpaca_exporter.discoverDevices(
            alpaca_base_url="http://localhost:11111/api/v1",
            verbose=False,
        )

        # Should return an empty dictionary when no devices are found
        self.assertEqual(len(discovered), 0, "Should return empty dict when no devices configured")


class TestConfigurationLoading(unittest.TestCase):
    """Test configuration file loading from YAML files"""

    def test_load_configurations(self):
        """
        Test loading device configuration files from config/ directory.

        Each device type (telescope, camera, etc.) has a YAML configuration file
        that defines which Alpaca attributes to monitor and how to map them to
        Prometheus metrics.
        """
        from importlib import import_module

        alpaca_exporter = import_module("alpaca-exporter")

        # Clear any existing configurations to start fresh
        alpaca_exporter.configurations = {}

        # Load all YAML configuration files from config/ directory
        # Path goes up from: tests/unit/ -> tests/ -> project_root/ -> config/
        config_path = Path(__file__).parent.parent.parent / "config"
        alpaca_exporter.loadConfigurations(str(config_path))

        # Verify that configurations were loaded successfully
        self.assertGreater(len(alpaca_exporter.configurations), 0, "At least one configuration file should be loaded")

        # Verify that the global configuration file was loaded
        # (global.yaml contains labels that apply to all devices)
        self.assertIn("global", alpaca_exporter.configurations, "Global configuration should be present")


if __name__ == "__main__":
    unittest.main()
