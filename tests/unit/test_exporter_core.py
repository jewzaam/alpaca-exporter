# Generated By: Cursor (Claude Sonnet 4.5)
"""
Unit tests for exporter_core.py functions

Tests configuration parsing, mode validation, device list building,
and metric cleanup functions.
"""

import sys
import unittest
from pathlib import Path
from unittest.mock import patch

import pytest

# Add src directory to path
sys.path.insert(0, str(Path(__file__).parent.parent.parent / "src"))

import metrics_utility

import constants
import exporter_core


class TestParseConfigDefaults(unittest.TestCase):
    """Test configuration parsing with default values"""

    def test_parse_all_defaults(self):
        """When no args provided, should return all defaults"""
        args = {}
        alpaca_base_url, refresh_rate, port = exporter_core.parse_config_defaults(args)

        self.assertEqual(alpaca_base_url, constants.DEFAULT_ALPACA_BASE_URL)
        self.assertEqual(refresh_rate, constants.DEFAULT_REFRESH_RATE)
        self.assertEqual(port, constants.DEFAULT_PORT)

    def test_parse_custom_alpaca_url(self):
        """Should use custom alpaca URL when provided"""
        args = {"alpaca_base_url": "http://custom:8080/api/v1"}
        alpaca_base_url, refresh_rate, port = exporter_core.parse_config_defaults(args)

        self.assertEqual(alpaca_base_url, "http://custom:8080/api/v1")
        self.assertEqual(refresh_rate, constants.DEFAULT_REFRESH_RATE)
        self.assertEqual(port, constants.DEFAULT_PORT)

    def test_parse_strips_trailing_slash(self):
        """Should strip trailing slash from alpaca URL"""
        args = {"alpaca_base_url": "http://custom:8080/api/v1/"}
        alpaca_base_url, _, _ = exporter_core.parse_config_defaults(args)

        self.assertEqual(alpaca_base_url, "http://custom:8080/api/v1")

    def test_parse_custom_refresh_rate(self):
        """Should use custom refresh rate when provided"""
        args = {"refresh_rate": 10}
        _, refresh_rate, _ = exporter_core.parse_config_defaults(args)

        self.assertEqual(refresh_rate, 10)

    def test_parse_custom_port(self):
        """Should use custom port when provided"""
        args = {"port": 9999}
        _, _, port = exporter_core.parse_config_defaults(args)

        self.assertEqual(port, 9999)

    def test_parse_all_custom(self):
        """Should use all custom values when provided"""
        args = {
            "alpaca_base_url": "http://192.168.1.100:11111/api/v1",
            "refresh_rate": 15,
            "port": 8888,
        }
        alpaca_base_url, refresh_rate, port = exporter_core.parse_config_defaults(args)

        self.assertEqual(alpaca_base_url, "http://192.168.1.100:11111/api/v1")
        self.assertEqual(refresh_rate, 15)
        self.assertEqual(port, 8888)


class TestIsDiscoverMode(unittest.TestCase):
    """Test discovery mode validation"""

    def test_discover_mode_enabled(self):
        """Should return True when --discover is set"""
        args = {"discover": True}
        result = exporter_core.is_discover_mode(args)

        self.assertTrue(result)

    def test_manual_mode_with_single_device(self):
        """Should return False when explicit device specified"""
        args = {"discover": False, "telescope": [0]}
        result = exporter_core.is_discover_mode(args)

        self.assertFalse(result)

    def test_manual_mode_with_multiple_devices(self):
        """Should return False when multiple devices specified"""
        args = {"discover": False, "telescope": [0], "camera": [0, 1]}
        result = exporter_core.is_discover_mode(args)

        self.assertFalse(result)

    def test_error_both_modes_specified(self):
        """Should raise ValueError when both modes specified"""
        args = {"discover": True, "telescope": [0]}

        with pytest.raises(ValueError, match="Cannot use --discover with explicit device"):
            exporter_core.is_discover_mode(args)

    def test_error_neither_mode_specified(self):
        """Should raise ValueError when neither mode specified"""
        args = {"discover": False}

        with pytest.raises(ValueError, match="Must specify either --discover or at least one device"):
            exporter_core.is_discover_mode(args)

    def test_error_discover_false_with_device(self):
        """Explicit device should work even if discover is explicitly False"""
        args = {"discover": False, "camera": [0]}
        result = exporter_core.is_discover_mode(args)

        self.assertFalse(result)


class TestGetManualDeviceList(unittest.TestCase):
    """Test building device list from command line arguments"""

    def test_single_device_single_number(self):
        """Should build dict with single device"""
        args = {"telescope": [0]}
        devices = exporter_core.get_manual_device_list(args)

        self.assertEqual(devices, {"telescope": [0]})

    def test_single_device_multiple_numbers(self):
        """Should build dict with multiple device numbers"""
        args = {"camera": [0, 1, 2]}
        devices = exporter_core.get_manual_device_list(args)

        self.assertEqual(devices, {"camera": [0, 1, 2]})

    def test_multiple_devices(self):
        """Should build dict with multiple device types"""
        args = {"telescope": [0], "camera": [0, 1], "rotator": [0]}
        devices = exporter_core.get_manual_device_list(args)

        self.assertEqual(devices, {"telescope": [0], "camera": [0, 1], "rotator": [0]})

    def test_empty_args(self):
        """Should return empty dict when no devices specified"""
        args = {}
        devices = exporter_core.get_manual_device_list(args)

        self.assertEqual(devices, {})

    def test_ignores_non_device_args(self):
        """Should ignore non-device arguments"""
        args = {
            "telescope": [0],
            "discover": False,
            "port": 9876,
            "refresh_rate": 5,
        }
        devices = exporter_core.get_manual_device_list(args)

        self.assertEqual(devices, {"telescope": [0]})

    def test_all_device_types(self):
        """Should handle all supported device types"""
        args = {dt: [0] for dt in constants.DEVICE_TYPES}
        devices = exporter_core.get_manual_device_list(args)

        expected = {dt: [0] for dt in constants.DEVICE_TYPES}
        self.assertEqual(devices, expected)


class TestCleanupStaleMetrics(unittest.TestCase):
    """Test stale metric cleanup"""

    def test_cleanup_removes_stale_metrics(self):
        """Should remove metrics that were in previous cycle but not current"""
        # Create some metrics in "previous" cycle
        metrics_utility.set("alpaca_device_connected", 1, {"device_type": "telescope", "device_number": 0})
        metrics_utility.set("alpaca_telescope_altitude", 45.0, {"device_type": "telescope", "device_number": 0, "name": "Test"})

        metrics_previous = [
            ["alpaca_device_connected", {"device_type": "telescope", "device_number": 0}],
            ["alpaca_telescope_altitude", {"device_type": "telescope", "device_number": 0, "name": "Test"}],
        ]

        # Current cycle only has device_connected (altitude is stale)
        metrics_current = [
            ["alpaca_device_connected", {"device_type": "telescope", "device_number": 0}],
        ]

        # Should call metrics_utility.set with None for stale metric
        with patch("exporter_core.metrics_utility.set") as mock_set:
            exporter_core.cleanup_stale_metrics(metrics_previous, metrics_current)

            # Should be called once to clear the stale altitude metric
            mock_set.assert_called_once_with(
                "alpaca_telescope_altitude",
                None,
                {"device_type": "telescope", "device_number": 0, "name": "Test"},
            )

    def test_cleanup_no_stale_metrics(self):
        """Should not remove anything if all metrics still present"""
        metrics_previous = [
            ["alpaca_device_connected", {"device_type": "telescope", "device_number": 0}],
            ["alpaca_telescope_altitude", {"device_type": "telescope", "device_number": 0, "name": "Test"}],
        ]

        metrics_current = [
            ["alpaca_device_connected", {"device_type": "telescope", "device_number": 0}],
            ["alpaca_telescope_altitude", {"device_type": "telescope", "device_number": 0, "name": "Test"}],
        ]

        with patch("exporter_core.metrics_utility.set") as mock_set:
            exporter_core.cleanup_stale_metrics(metrics_previous, metrics_current)

            # Should not call metrics_utility.set at all
            mock_set.assert_not_called()

    def test_cleanup_empty_previous(self):
        """Should handle empty previous metrics list"""
        metrics_previous = []
        metrics_current = [
            ["alpaca_device_connected", {"device_type": "telescope", "device_number": 0}],
        ]

        with patch("exporter_core.metrics_utility.set") as mock_set:
            exporter_core.cleanup_stale_metrics(metrics_previous, metrics_current)

            # Should not call metrics_utility.set
            mock_set.assert_not_called()

    def test_cleanup_multiple_stale_metrics(self):
        """Should remove multiple stale metrics"""
        metrics_previous = [
            ["alpaca_device_connected", {"device_type": "telescope", "device_number": 0}],
            ["alpaca_telescope_altitude", {"device_type": "telescope", "device_number": 0, "name": "Test"}],
            ["alpaca_telescope_azimuth", {"device_type": "telescope", "device_number": 0, "name": "Test"}],
            ["alpaca_telescope_declination", {"device_type": "telescope", "device_number": 0, "name": "Test"}],
        ]

        metrics_current = [
            ["alpaca_device_connected", {"device_type": "telescope", "device_number": 0}],
        ]

        with patch("exporter_core.metrics_utility.set") as mock_set:
            exporter_core.cleanup_stale_metrics(metrics_previous, metrics_current)

            # Should call metrics_utility.set 3 times for 3 stale metrics
            self.assertEqual(mock_set.call_count, 3)

    def test_cleanup_with_different_labels(self):
        """Should only remove metrics with exact label match"""
        metrics_previous = [
            ["alpaca_device_connected", {"device_type": "telescope", "device_number": 0}],
            ["alpaca_device_connected", {"device_type": "telescope", "device_number": 1}],
        ]

        metrics_current = [
            ["alpaca_device_connected", {"device_type": "telescope", "device_number": 0}],
        ]

        with patch("exporter_core.metrics_utility.set") as mock_set:
            exporter_core.cleanup_stale_metrics(metrics_previous, metrics_current)

            # Should only clear device_number=1
            mock_set.assert_called_once_with(
                "alpaca_device_connected",
                None,
                {"device_type": "telescope", "device_number": 1},
            )


if __name__ == "__main__":
    unittest.main()
