# Generated By: Cursor (Claude Sonnet 4.5)

[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "alpaca-exporter"
version = "0.1.0"
description = "Prometheus exporter for ASCOM Alpaca astronomical devices"
authors = [
    {name = "Jeff Zaman", email = "jewzaam@gmail.com"}
]
readme = "README.md"
requires-python = ">=3.10"
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
]
dependencies = [
    "argparse",
    "pyyaml",
    "cachetools",
    "requests",
    "prometheus-client",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.0.0",
    "mypy>=1.0.0",
    "ruff>=0.1.0",
    "coverage>=7.0.0",
    "types-requests>=2.0.0",
    "types-PyYAML>=6.0.0",
    "types-cachetools>=5.0.0",
]

[tool.setuptools.packages.find]
where = ["src"]

[tool.setuptools.package-dir]
"" = "src"



[tool.mypy]
python_version = "3.10"
# Relaxed settings for existing codebase
warn_return_any = false
warn_unused_configs = false
disallow_untyped_defs = false
disallow_incomplete_defs = false
check_untyped_defs = false
disallow_untyped_decorators = false
no_implicit_optional = false
warn_redundant_casts = false
warn_unused_ignores = false
warn_no_return = false
warn_unreachable = false
strict_equality = false
# Allow missing imports and type stubs
ignore_missing_imports = true
# Don't require type annotations for variables
allow_untyped_globals = true
allow_untyped_defs = true

[tool.ruff]
line-length = 180
target-version = "py310"

[tool.ruff.lint]
select = ["E", "F", "W", "I", "N", "UP", "YTT", "S", "BLE", "FBT", "B", "A", "COM", "C4", "DTZ", "T10", "DJ", "EM", "EXE", "FA", "ISC", "ICN", "G", "INP", "PIE", "T20", "PYI", "PT", "Q", "RSE", "RET", "SLF", "SLOT", "SIM", "TID", "TCH", "INT", "ARG", "PTH", "TD", "FIX", "ERA", "PD", "PGH", "PL", "TRY", "FLY", "NPY", "PERF", "FURB", "LOG", "RUF"]
ignore = [
    "E501",     # Line too long (handled by formatter)
    "S101",     # Use of assert
    "PLR0913",  # Too many arguments
    "PLR0912",  # Too many branches
    "PLR0915",  # Too many statements
    "PLW0603",  # Global statement usage
    "TRY300",   # Else after return
    "COM812",   # Trailing comma missing (conflicts with formatter)
    "S603",     # subprocess call
    "PLC0415",  # import at module level
    "T201",     # print found (legacy code uses print for CLI output)
    "N802",     # Function name should be lowercase (legacy code)
    "N803",     # Argument name should be lowercase (legacy code)
    "N806",     # Variable in function should be lowercase (legacy code)
    "N816",     # Variable in global scope should not be mixedCase (legacy code)
    "N999",     # Invalid module name (alpaca-exporter uses hyphens)
    "FBT002",   # Boolean default positional argument (legacy code)
    "FBT003",   # Boolean positional value in function call (legacy code)
    "PTH123",   # open() should be Path.open() (legacy code)
    "PTH118",   # os.path.join should be Path (legacy code)
    "PTH120",   # os.path.dirname should be Path.parent (legacy code)
    "PTH100",   # os.path.abspath should be Path.resolve() (legacy code)
    "PTH204",   # os.path.getmtime should be Path.stat().st_mtime (legacy code)
    "S506",     # Unsafe yaml.load (configuration files are trusted)
    "S113",     # requests call without timeout (local network calls)
    "PLR2004",  # Magic value in comparison (legacy code)
    "E712",     # Comparison to True (legacy code)
    "PLR1722",  # Use sys.exit instead of exit (legacy code)
    "BLE001",   # Blind exception catch (legacy code)
    "ERA001",   # Commented-out code (documentation comments)
    "F841",     # Unused variable (legacy code)
    "SIM118",   # Use key in dict (legacy code)
    "E741",     # Ambiguous variable name (legacy code)
    "B023",     # Function does not bind loop variable (legacy code)
    "E722",     # Bare except (legacy code)
    "S110",     # try-except-pass (legacy code)
    "A001",     # Variable shadows builtin (legacy code)
    "RET503",   # Missing explicit return (legacy code)
    "PERF401",  # Use list comprehension (legacy code)
    "PT009",    # Use assert instead of unittest (keeping unittest style)
    "SLF001",   # Private member accessed (test code needs it)
    "SIM108",   # Use ternary operator (readability preference)
]

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
addopts = "-v --tb=short"
asyncio_mode = "auto"


